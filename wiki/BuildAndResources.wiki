I (dm) am developing osghimmel with CMake 2.8.5, OSG 2.8.5 and Qt 4.8.0. Usually i prefer to build x64 binaries and since all mentioned libs and tools above are opensource, i build them my self. To bypass building third party libs yourself, this wikipage provides build instructions and lists available binary resources for each of them.

= CMake instructions =

There are currently 3 options:
 * OPTION_MAKE_DEMOS: adds sub-directories of demo apps
 * OPTION_MAKE_SKYBOX: add skybox project (osghimmel's sandbox)
 * OPTION_MAKE_PACKAGE: adds PACKAGE project to solution, yielding an archive with all available executables, required dependencies and resources. This *requires OSG_BINARY_DIR and OSG_SOVERSION* (that is the number appended to the osg binary names - e.g. 74 in osg74.dll for 2.8.5).

When successfully building the PACKAGE project, a zip archive should be available in the build directory.

= Requirements and Binaries =

QtPropertyBrowser
 * Sources ([http://qt.gitorious.org/qt-solutions/qt-solutions/trees/master/qtpropertybrowser located here]) are included in the trunk. No additional building is required.

CMake
 * Version *2.8 or higher* is recommended
 * Latest downloads can be found here [http://www.cmake.org/cmake/resources/software.html].

OpenSceneGraph
 * osghimmel requires [http://www.openscenegraph.org/projects/osg OpenSceneGraph] tagged *2.8.5 or higher*. 
 * Up-to-date sets of working binaries can be found at [http://openscenegraph.alphapixel.com/osg/downloads/free-openscenegraph-binary-downloads Alpha Pixel].

Qt
 * The skybox (osghimmel's sandbox) requires Qt4 tagged *4.7 or higher*.
 * [http://code.google.com/p/qt-msvc-installer/downloads/list qt-msvc-installer] provides several Microsoft Visual Studio builds.

= Build Instructions =

 # *CMake - Configure and Verify*: After configuring CMake the first time, you should verify the OSG_SOVERSION as well as the OSG_BINARY_DIR (since they are predefined or guessed). 
 # *Check Resources*: If Demos or Skybox option is enabled in CMake, a resources path should be specified (resources archive will be available here soon).
 # *Build ALL*: After building ALL, binaries where placed into a bin directory, placed into the cmake_source_directory. 
 # *Build INSTALL* before running apps: Building the INSTALL target will copy all dependencies (Qt, OSG, etc) and resources (if any) into the bin directory.
 # *Setup Working Directory*: set the Working Directory for executable targets in your e.g. MSVC projects to $(OutDir). This should be required only once for each project and configuration, since it is saved in the projects user file.
 # *Run Apps*